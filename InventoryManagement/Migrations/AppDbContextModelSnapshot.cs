// <auto-generated />
using System;
using InventoryManagement.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventoryManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("Id", "shared")
                .StartsAt(100004L)
                .HasMax(999999L);

            modelBuilder.Entity("InventoryManagement.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR shared.Id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StockAvailable")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 100000,
                            Category = "Electronics",
                            CreatedAt = new DateTime(2025, 8, 29, 14, 14, 55, 367, DateTimeKind.Utc).AddTicks(3132),
                            Description = "16GB RAM, 512GB SSD",
                            Name = "Laptop",
                            Price = 89999.99m,
                            StockAvailable = 10
                        },
                        new
                        {
                            Id = 100001,
                            Category = "Electronics",
                            CreatedAt = new DateTime(2025, 9, 1, 14, 14, 55, 367, DateTimeKind.Utc).AddTicks(3140),
                            Description = "5G-enabled device",
                            Name = "Smartphone",
                            Price = 49999.50m,
                            StockAvailable = 25
                        },
                        new
                        {
                            Id = 100002,
                            Category = "Stationery",
                            CreatedAt = new DateTime(2025, 9, 3, 14, 14, 55, 367, DateTimeKind.Utc).AddTicks(3142),
                            Description = "200 pages, ruled",
                            Name = "Notebook",
                            Price = 59.99m,
                            StockAvailable = 500
                        },
                        new
                        {
                            Id = 100003,
                            Category = "Appliances",
                            CreatedAt = new DateTime(2025, 8, 23, 14, 14, 55, 367, DateTimeKind.Utc).AddTicks(3144),
                            Description = "3-speed oscillation",
                            Name = "Table Fan",
                            Price = 1299.99m,
                            StockAvailable = 100
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
